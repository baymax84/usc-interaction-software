#!/bin/bash

usage()
{
        echo ""
        echo "Usage: make_deb <package> [-d distname -d distname2] [-a archname -a archname2] [-m modname -m modname2]"
        echo ""
}

addDist()
{
    if [ "$dists" == "" ]; then
        dists=$1
    else
        dists="$dists $1"
    fi
}

addArch()
{
    if [ "$archs" == "" ]; then
        archs=$1
    else
        archs="$archs $1"
    fi
}

addMod()
{
    if [ "$mods" == "" ]; then
        mods=$1
    else
        mods="$mods $1"
    fi
}

overrideVersion()
{
    override_version=$1
    echo "Version forced to $override_version"
}

overrideRelease()
{
    override_release=$1
    echo "Release forced to $override_release"
}

cleanupBuildDir()
{
    if [ "$cleanup" == "true" ]; then
        if [ "$target_debname" != "" ]; then
            echo "Removing build dir $target_fullpath/.."
            for dist in $dists; do
              target_fullname=$target_debname"~"$dist
              cd $target_fullpath/.. && rm -rf $target_fullname-debuild
            done
        fi
    fi
}

target=$1; shift

if [ "$target" == "" ]; then usage; exit; fi

override_version=""
override_release=""
cleanup="true"
build="true"
force="false"

if [ -r $target/buildinfo ]; then
    extra_build_args=`cat $target/buildinfo`
    set -- "$@" $extra_build_args
    echo "Added extra build args [ $extra_build_args ] from buildinfo"
fi

while [ "$1" != "" ]; do
    case $1 in
        -d )        shift
                    addDist "$1"
                    shift
                    ;;
        -a )        shift
                    addArch "$1"
                    shift
                    ;;
        -m )        shift
                    addMod "$1"
                    shift
                    ;;
        --version ) shift
                    overrideVersion "$1"
                    shift
                    ;;
        --release )  shift
                    overrideRelease "$1"
                    shift
                    ;;
        --no-cleanup ) shift
                       cleanup="false"
                       ;;
        --no-build ) shift
                     build="false"
                     cleanup="false"
                     ;;
        --force )   shift
                    force="true"
                    ;;
        --help )    usage
                    exit
                    ;;
        * )         shift
                    ;;
    esac
done

if [ "$archs" == "" ]; then archs=`dpkg --print-architecture`; fi
if [ "$dists" == "" ]; then dists=`cat /etc/*-release | grep CODENAME | sed 's:DISTRIB_CODENAME=::g'`; fi
if [ "$mods" == "" ]; then mods="interaction"; fi

echo -e "Selected dists: \e[1;2;34m$dists\e[0m"
echo -e "Selected archs: \e[1;2;34m$archs\e[0m"
echo -e "Selected mods: \e[1;2;34m$mods\e[0m"

cd $target
target_fullpath=`pwd`

control_source=`cat debian/control`
source_arch=`echo "$control_source" | grep --max-count 1 "Architecture: " | sed -r 's/Architecture: *//g'`
target_name=`echo "$control_source" | grep --max-count 1 "Source: " | sed -r 's/Source: *//g'`
target_branch=`git branch -l | grep \* | sed 's:\* ::g'`

if [ "$override_release" != "" ]; then
    target_release=$override_release
else
    target_release="auto"
fi

if [ "$override_version" != "" ]; then
    target_version=$override_version
else
    target_version=`echo $target_branch | sed -r 's:[a-zA-Z\-]*-?([0-9\.]+)-:\1:1'`
fi

#changelog_content=`[ ! -r debian/changelog ] || cat debian/changelog`

if [ "$target_release" == "auto" ]; then
    target_release=`git log -n 1 --pretty=format:"%ct" .`
fi

#target_release_exists=`echo "$changelog_content" | grep -c "$target_version-$target_release"`

target_debname=$target_name"_"$target_version"-"$target_release

cd ..

#target_releasename=$target_name"_"$target_version

#latest_log=`git log -n 1`
#target_version=`echo "$latest_log" | tr '[A-Z]' '[a-z]' | grep date | sed -r 's/date: +//g' | sed -r 's: -.+::g' | sed -r 's: :-:g' | sed 's/:/-/g'`
#echo $target_version
#cd ..

for dist in $dists; do
    echo -e "Initializing build for dist group \e[1;2;34m$dist\e[0m"
    echo "----------"

    dist_build_setup="false"

    for arch in $archs; do
        echo -e "Initializing build for arch group \e[1;2;34m$arch\e[0m"
        echo "----------"

        if [ "$source_arch" == "any" ]; then
            package_arch="$arch"
        else
            package_arch="$source_arch"
        fi

        if [ "$force" != "true" ]; then
            if [ -r ~/archive/$dist/$target_debname"_"$package_arch.deb ]; then
                echo -e "\e[35mTarget release [ $target_debname $dist $package_arch ] already exists in the local archive. Skipping.\e[0m"
                continue
            fi
        else
            echo "--force detected; skipping version checking."
        fi

        if [ "$dist_build_setup" == "false" ]; then
            echo -e "\e[32mInitializing [ $target_debname $dist ]\e[0m"

            interaction-init-changelog $target --update

            target_fullname=$target_debname"~"$dist
            if [ -r $target_fullname-debuild ]; then
                rm -rf $target_fullname-debuild
            fi

            mkdir $target_fullname-debuild
            cp $target $target_fullname-debuild/$target_debname -r

            cd $target_fullname-debuild
            interaction-init-changelog $target_debname --generate-only -p $dist
            cp $target_debname $target_debname.orig -r

            cd $target_debname

            # debuild seems to fail here sometimes...but it appears to always succeed the second time
            # so, quick fix; if it fails the first time, run it again
            # if it fails the second time, bail
            if ( ! debuild -S ); then
                if ( ! debuild -S ); then
                    exit 1;
                fi
            fi

            dist_build_setup="true"
        fi

        for mod in $mods; do
            echo -e "Initializing build for mod group \e[1;2;34m$mod\e[0m"
            echo "----------"

            if [ "$build" == "true" ]; then
                echo -e "\e[32mBuilding [ $target_debname $dist $arch ]\e[0m"
                sudo DIST=$dist ARCH=$arch MOD=$mod cowbuilder --build ../*.dsc
            fi
        done
    done
    if [ "$dist_build_setup" == "true" ]; then
        cd ../..
    fi
done

cleanupBuildDir
